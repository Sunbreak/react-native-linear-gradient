def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
    // The Android Gradle plugin is only required when opening the android folder stand-alone.
    // This avoids unnecessary downloads and potential conflicts when the library is included as a
    // module dependency in an application project.
    if (project == rootProject) {
        repositories {
            mavenCentral()
            google()
        }
        dependencies {
            classpath 'com.android.tools.build:gradle:3.5.3'
        }
    }
}

def isNewArchitectureEnabled() {
    return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: 'com.android.library'
if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}
apply from: 'publish_local.gradle'

import groovy.json.JsonSlurper

// https://github.com/callstack/react-native-builder-bob/discussions/359
def registrationCompat = {
  def reactNativeManifest = file("$projectDir/../node_modules/react-native/package.json").exists()
    ? file("$projectDir/../node_modules/react-native/package.json") // developer mode, to run example app
    : file("$projectDir/../../react-native/package.json")
  def reactNativeVersion = new JsonSlurper().parseText(reactNativeManifest.text).version as String
  // Fabric was introduced at react-native@0.68, full CMake support were introduced at react-native@0.71
  // Use Android.mk for compatibility with react-native@0.68/0.69
  reactNativeVersion.matches('(0.68.*|0.69.*)')
}()

def codegenViewLibraryName = "LinearGradientView"
def codegenViewModuleName = {
  // Autolink for Fabric uses codegenConfig.name in package.json since react-native@0.70
  // Use codegenViewLibraryName for compatibility with react-native@0.68/0.69
  def libraryManifestJson = new JsonSlurper().parseText(file("$projectDir/../package.json").text)
  registrationCompat ? codegenViewLibraryName : libraryManifestJson.codegenConfig.name
}()

def appProject = rootProject.allprojects.find { it.plugins.hasPlugin('com.android.application') }

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 28)
    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 28)
        versionCode 1
        versionName "1.0"

        buildConfigField "String", "CODEGEN_MODULE_REGISTRATION", (isNewArchitectureEnabled() && registrationCompat ? "\"${codegenViewModuleName}_registration\"" : "null")

        if (isNewArchitectureEnabled() && registrationCompat) {
            def reactAndroidProject = project(':ReactAndroid')
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_PLATFORM=android-21",
                                "APP_STL=c++_shared",
                                "NDK_TOOLCHAIN_VERSION=clang",
                                "GENERATED_SRC_DIR=$buildDir/generated/source", // for react_codegen_* in this library's codegen/jni
                                "PROJECT_BUILD_DIR=${appProject.buildDir}", // for REACT_NDK_EXPORT_DIR in ReactAndroid's Android-prebuilt.mk
                                "REACT_ANDROID_DIR=${reactAndroidProject.projectDir}",
                                "REACT_ANDROID_BUILD_DIR=${reactAndroidProject.buildDir}",
                                "CODEGEN_MODULE_NAME=$codegenViewModuleName"
                    cFlags "-Wall", "-Werror", "-fexceptions", "-frtti", "-DWITH_INSPECTOR=1"
                    cppFlags "-std=c++17"
                    targets "${codegenViewModuleName}_registration"
                }
            }
        }
    }
    if (isNewArchitectureEnabled() && registrationCompat) {
        // We configure the NDK build only if you decide to opt-in for the New Architecture.
        externalNativeBuild {
            ndkBuild {
                path "Android.mk"
            }
        }

        packagingOptions {
            jniLibs.excludes.addAll [
                '**/libc++_shared.so',
                '**/libfabricjni.so',
                '**/libfbjni.so',
                '**/libfolly_runtime.so',
                '**/libglog.so',
                '**/libjsi.so',
                '**/libreact_codegen_rncore.so',
                '**/libreact_debug.so',
                '**/libreact_nativemodule_core.so',
                '**/libreact_render_componentregistry.so',
                '**/libreact_render_core.so',
                '**/libreact_render_debug.so',
                '**/libreact_render_graphics.so',
                '**/librrc_view.so',
                '**/libruntimeexecutor.so',
                '**/libturbomodulejsijni.so',
                '**/libyoga.so',
            ]
        }
    }
    lintOptions {
        abortOnError false
    }
    sourceSets {
        main {
            if (isNewArchitectureEnabled()) {
                java.srcDirs += [
                    "src/newarch",
                    // This is needed to build Kotlin project with NewArch enabled
                    "${project.buildDir}/generated/source/codegen/java"
                ]
            } else {
                java.srcDirs += ["src/oldarch"]
            }
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
        url "$rootDir/../node_modules/react-native/android"
    }
    maven {
        // Android JSC is installed from npm
        url "$rootDir/../node_modules/jsc-android/dist"
    }
    google()
}

dependencies {
    //noinspection GradleDynamicVersion
    implementation 'com.facebook.react:react-native:+'  // From node_modules
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../")
    libraryName = codegenViewLibraryName
    codegenJavaPackageName = "com.BV.LinearGradient"
  }

  def value = project.getProperties().get("reactNativeArchitectures")
  def reactNativeArchitectures = value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]

  afterEvaluate {
    preDebugBuild.dependsOn appProject.tasks['preDebugBuild']
    preReleaseBuild.dependsOn appProject.tasks['preReleaseBuild']

    // Due to a bug inside AGP, we have to explicitly set a dependency
    // between configureNdkBuild* tasks and the preBuild tasks.
    // This can be removed once this is solved: https://issuetracker.google.com/issues/207403732
    tasks.findByName('configureNdkBuildDebug')?.dependsOn preDebugBuild
    tasks.findByName('configureNdkBuildRelease')?.dependsOn preReleaseBuild
    reactNativeArchitectures.each { architecture ->
      tasks.findByName("configureNdkBuildDebug[${architecture}]")?.configure {
        dependsOn("preDebugBuild")
      }
      tasks.findByName("configureNdkBuildRelease[${architecture}]")?.configure {
        dependsOn("preReleaseBuild")
      }
    }
  }
}
